/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Windows;

import Classes.Grafo;
import Classes.List;
import Classes.Relacion;
import Classes.Vertice;
import Classes.band_Relationship;
import Classes.dist_Relationship;
import static Windows.Corto.cb_dij;
import static Windows.deleteNode.cb_eliminar;
import static Windows.editNode.cb_vertex;
import static Windows.editNode.tf_nom;
import static Windows.newRelationship.cb_node1;
import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.UndirectedSparseMultigraph;
import edu.uci.ics.jung.graph.util.EdgeType;
import edu.uci.ics.jung.visualization.BasicVisualizationServer;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import java.awt.Dimension;
import java.io.File;
import java.util.Collection;
import java.util.Scanner;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Memo
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        Vertice node = new Vertice("TOGO", 2);
        nodos.insert(node, nodos.size());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setText("Load from File...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenu3.setText("Nodos");

        jMenuItem2.setText("Crear");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("Modificar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("Eliminar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenu2.add(jMenu3);

        jMenu4.setText("Conexiones");

        jMenuItem5.setText("Crear");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenu2.add(jMenu4);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("View");

        jMenuItem8.setText("Ver mapa(ancho de banda)...");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem8);

        jMenuItem9.setText("Ver mapa(longitudes)...");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenuItem10.setText("Ver mapa(Ambos)...");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuItem6.setText("Distancia mas corta(uno a todos)");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(313, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(jButton1)
                .addContainerGap(140, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        newNode node = new newNode();
        node.pack();
        node.setVisible(true);
        node.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        if (nodos.size() == 0) {
            JOptionPane.showMessageDialog(this, "No existen nodos");
        } else {
            editNode edit = new editNode();
            edit.pack();
            edit.setVisible(true);
            edit.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            for (int i = 0; i < nodos.size(); i++) {
                model.addElement(nodos.get(i));
            }
            cb_vertex.setModel(model);
            tf_nom.setText(((Vertice) nodos.get(0)).getNombre());

        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        if (nodos.size() == 0) {
            JOptionPane.showMessageDialog(this, "No existen nodos que eliminar");
        } else {
            deleteNode delNode = new deleteNode();
            delNode.pack();
            delNode.setVisible(true);
            delNode.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            for (int i = 0; i < nodos.size(); i++) {
                model.addElement(nodos.get(i));
            }
            cb_eliminar.setModel(model);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        newRelationship newRel = new newRelationship();
        newRel.pack();
        newRel.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        newRel.setVisible(true);
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for (int i = 0; i < nodos.size(); i++) {
            model.addElement(nodos.get(i));
        }
        cb_node1.setModel(model);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        relaciones.Print_Lista();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        nodos.Print_Lista();
        g = new UndirectedSparseMultigraph<Vertice, Relacion>();
        g.addVertex(nodos.get(0));
        for (int i = 0; i < relaciones.size(); i++) {
            g.addEdge(relaciones.get(i), ((Relacion) relaciones.get(i)).getV1(), ((Relacion) relaciones.get(i)).getV2(), EdgeType.UNDIRECTED);
        }

        Layout<Integer, String> layout = new CircleLayout(g);
        layout.setSize(new Dimension(550, 550));
        BasicVisualizationServer<Integer, String> visualization = new BasicVisualizationServer<Integer, String>(layout);
        visualization.setPreferredSize(new Dimension(600, 600));
        visualization.getRenderContext().setLabelOffset(20);
        visualization.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        visualization.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller());
        JFrame frame = new JFrame("TOGO");
        frame.getContentPane().add(visualization);

        frame.pack();
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        Scanner sc = null;
        File archivo = null;
        try {
            archivo = new File("./mapa.txt");
            sc = new Scanner(archivo);
            sc.useDelimiter(",");
            while (sc.hasNext()) {
                String nombre = sc.next();
                int num_tipo = sc.nextInt();
                String nombre2 = sc.next();
                int num_tipo2 = sc.nextInt();
                int longitud = sc.nextInt();
                int max_banda = sc.nextInt();
                String material = sc.next();
                Vertice v1 = null;
                Vertice v2 = null;
                if (relaciones.size() == 0) {
                    v1 = new Vertice(nombre, num_tipo);
                    v2 = new Vertice(nombre2, num_tipo2);
                    Relacion m = new Relacion(v1, v2, longitud, max_banda, material);
                    System.out.println(m.getV1() + " y " + m.getV2());
                    nodos.insert(v1, nodos.size());
                    nodos.insert(v2, nodos.size());
                    relaciones.insert(m, relaciones.size());
                    m = new Relacion((Vertice) nodos.get(0), v1, 1, 2000, "Fibra Optica");
                    System.out.println(m.getV1() + " y " + m.getV2());
                    relaciones.insert(m, relaciones.size());
                    d_relaciones.insert(new dist_Relationship(v1, v2, longitud), d_relaciones.size());
                    b_relaciones.insert(new band_Relationship(v1, v2, max_banda), b_relaciones.size());
                    d_relaciones.insert(new dist_Relationship((Vertice) nodos.get(0), v1, 25), d_relaciones.size());
                    b_relaciones.insert(new band_Relationship((Vertice) nodos.get(0), v1, 2000), b_relaciones.size());
                } else {
                    List aux = new List();
                    v1 = new Vertice(nombre, num_tipo);
                    v2 = new Vertice(nombre2, num_tipo2);
                    boolean insert = true;
                    for (int i = 0; i < nodos.size(); i++) {
                        if (v1.getNombre().equals(((Vertice)nodos.get(i)).getNombre())) {
                            insert = false;
                        }
                    }
                    if (insert) {
                        nodos.insert(v1, nodos.size());
                    }
                    insert = true;
                    for (int i = 0; i < nodos.size(); i++) {
                        if (v2.getNombre().equals(((Vertice)nodos.get(i)).getNombre())) {
                            insert = false;
                        }
                    }
                    if (insert) {
                        nodos.insert(v2, nodos.size());
                    }
                    Relacion m = new Relacion(v1, v2, longitud, max_banda, material);
                    aux.insert(m, aux.size());
                    Vertice auxi = null;
                    for (int i = 0; i < nodos.size(); i++) {
                        for (int j = 0; j < aux.size(); j++) {
                            if (((Vertice)nodos.get(i)).getNombre().equals(((Relacion)aux.get(j)).getV1().getNombre())) {
                                for (int k = 0; k < nodos.size(); k++) {
                                    if (((Relacion)aux.get(j)).getV2().getNombre().equals(((Vertice)nodos.get(k)).getNombre())) {
                                        auxi = (Vertice)nodos.get(k);
                                        break;
                                    }
                                }
                                relaciones.insert(new Relacion((Vertice)nodos.get(i), auxi, ((Relacion)aux.get(j)).getLongitud(),((Relacion)aux.get(j)).getMax_ancho_de_banda(), ((Relacion)aux.get(j)).getMaterial()), relaciones.size());
                            } 
                        }
                    }
                }
                

//                } else if (((Relacion) relaciones.get(relaciones.size() - 1)).getV1().getNombre().equals(nombre)
//                        && ((Relacion) relaciones.get(relaciones.size() - 1)).getV2().getNombre().equals(nombre2)
//                        || ((Relacion) relaciones.get(relaciones.size() - 1)).getV1().getNombre().equals(nombre2)
//                        && ((Relacion) relaciones.get(relaciones.size() - 1)).getV2().getNombre().equals(nombre)) {
//                    //do  nothing
//                } else {
//                    if (((Relacion) relaciones.get(relaciones.size() - 1)).getV1().getNombre().equals(nombre)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV2().getNombre().equals(nombre)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV1().getNombre().equals(nombre2)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV2().getNombre().equals(nombre2)) {
//                        v1 = ((Relacion) relaciones.get(relaciones.size() - 1)).getV1();
//                        v2 = new Vertice(nombre2, num_tipo2);
//                        System.out.println(((Relacion)relaciones.get(relaciones.size() -1)).getV1());
//                        System.out.println("primero: "+ v2);
//                        Relacion m = new Relacion(v1, v2, longitud, max_banda, material);
//                        relaciones.insert(m, relaciones.size());
//                        nodos.insert(v2, nodos.size());
//                        d_relaciones.insert(new dist_Relationship(v1, v2, longitud), d_relaciones.size());
//                        b_relaciones.insert(new band_Relationship(v1, v2, max_banda), b_relaciones.size());
//                    } else if (((Relacion) relaciones.get(relaciones.size() - 1)).getV2().getNombre().equals(nombre)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV1().getNombre().equals(nombre)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV1().getNombre().equals(nombre2)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV2().getNombre().equals(nombre2)) {
//                        v1 = ((Relacion) relaciones.get(relaciones.size() - 1)).getV2();
//                        v2 = new Vertice(nombre2, num_tipo2);
//                        System.out.println("Segundo: " + v2);
//                        Relacion m = new Relacion(v1, v2, longitud, max_banda, material);
//                        relaciones.insert(m, relaciones.size());
//                        nodos.insert(v2, nodos.size());
//                        d_relaciones.insert(new dist_Relationship(v1, v2, longitud), d_relaciones.size());
//                        b_relaciones.insert(new band_Relationship(v1, v2, max_banda), b_relaciones.size());
//                    } else if (((Relacion) relaciones.get(relaciones.size() - 1)).getV1().getNombre().equals(nombre2)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV2().getNombre().equals(nombre2)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV1().getNombre().equals(nombre)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV2().getNombre().equals(nombre)) {
//                        v1 = new Vertice(nombre, num_tipo);
//                        System.out.println("Tercero: "+ v1);
//                        v2 = ((Relacion) relaciones.get(relaciones.size() - 1)).getV1();
//                        Relacion m = new Relacion(v1, v2, longitud, max_banda, material);
//                        relaciones.insert(m, relaciones.size());
//                        nodos.insert(v1, nodos.size());
//                        d_relaciones.insert(new dist_Relationship(v1, v2, longitud), d_relaciones.size());
//                        b_relaciones.insert(new band_Relationship(v1, v2, max_banda), b_relaciones.size());
//                    } else if (((Relacion) relaciones.get(relaciones.size() - 1)).getV2().getNombre().equals(nombre2)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV1().getNombre().equals(nombre2)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV1().getNombre().equals(nombre)
//                            && !((Relacion) relaciones.get(relaciones.size() - 1)).getV2().getNombre().equals(nombre)) {
//                        v1 = new Vertice(nombre, num_tipo);
//                        System.out.println("Cuarto: "+ v1);
//                        v2 = ((Relacion) relaciones.get(relaciones.size() - 1)).getV2();
//                        Relacion m = new Relacion(v1, v2, longitud, max_banda, material);
//                        relaciones.insert(m, relaciones.size());
//                        nodos.insert(v1, nodos.size());
//                        d_relaciones.insert(new dist_Relationship(v1, v2, longitud), d_relaciones.size());
//                        b_relaciones.insert(new band_Relationship(v1, v2, max_banda), b_relaciones.size());
//                    }
//                }
            }
        } catch (Exception e) {
        } finally {
            sc.close();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        g = new UndirectedSparseMultigraph<Vertice, dist_Relationship>();
        g.addVertex(nodos.get(0));
        for (int i = 0; i < d_relaciones.size(); i++) {
            g.addEdge(d_relaciones.get(i), ((dist_Relationship) d_relaciones.get(i)).getV1(), ((dist_Relationship) d_relaciones.get(i)).getV2(), EdgeType.UNDIRECTED);
        }

        Layout<Integer, String> layout = new CircleLayout(g);
        layout.setSize(new Dimension(550, 550));
        BasicVisualizationServer<Integer, String> visualization = new BasicVisualizationServer<Integer, String>(layout);
        visualization.setPreferredSize(new Dimension(600, 600));
        visualization.getRenderContext().setLabelOffset(20);
        visualization.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        visualization.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller());
        JFrame frame = new JFrame("TOGO (distancias)");
        frame.getContentPane().add(visualization);

        frame.pack();
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        g = new UndirectedSparseMultigraph<Vertice, band_Relationship>();
        g.addVertex(nodos.get(0));
        for (int i = 0; i < b_relaciones.size(); i++) {
            g.addEdge(b_relaciones.get(i), ((band_Relationship) b_relaciones.get(i)).getV1(), ((band_Relationship) b_relaciones.get(i)).getV2(), EdgeType.UNDIRECTED);
        }

        Layout<Integer, String> layout = new CircleLayout(g);
        layout.setSize(new Dimension(550, 550));
        BasicVisualizationServer<Integer, String> visualization = new BasicVisualizationServer<Integer, String>(layout);
        visualization.setPreferredSize(new Dimension(600, 600));
        visualization.getRenderContext().setLabelOffset(20);
        visualization.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        visualization.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller());
        JFrame frame = new JFrame("TOGO (Ancho de Banda)");
        frame.getContentPane().add(visualization);

        frame.pack();
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        Corto dij = new Corto();
        dij.pack();
        dij.setVisible(true);
        dij.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        DefaultComboBoxModel model = new DefaultComboBoxModel();
            for (int i = 0; i < nodos.size(); i++) {
                model.addElement(nodos.get(i));
            }
            cb_dij.setModel(model);
        grafo = new Grafo(nodos, relaciones);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    // End of variables declaration//GEN-END:variables
    public static UndirectedSparseMultigraph g;
    public static Grafo grafo;
    public static List nodos = new List();
    public static List relaciones = new List();
    public static List b_relaciones = new List();
    public static List d_relaciones = new List();
}
